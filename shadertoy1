void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));
    
    // Other Simple things
    //float t = sin((iTime * uv.x * f) * a + a) + (sin(uv.x * f) * a + a) ;
    //float t = sin((uv.x * 6.0 + iTime) * a + a) + (sin(uv.x * f) * a + a) ;
    //float t = sin((uv.x * 6.0 + iTime) * a + a) + (sin(uv.x * f + iTime) * a + a);
    //float t = sin((uv.x * f + iTime) * a + a) + sin(uv.x * iTime);
    //float y = mod(sin(uv.y), 6.0);
    
    float f = 12.0;
    float a = 0.5 * sin(iTime);
    float f2 = 7.0 * sin(iTime);
    float a2 = 0.05 * sin(iTime) + .5;
    float f3 = 2.0 * sin(iTime);
    float a3 = -0.1 * sin(iTime);
    
    float vertOffset = .5;
    
    // I'm still not sure why this works
    float t = vertOffset + sin(uv.x*f+iTime)*a + sin(uv.x*f2+iTime)*a2 + sin(uv.x*f3+iTime)*a3;
    t = step(t,uv.y);

    // Output to screen
    fragColor = vec4(t, 1.0, 1.0,1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    
    // Wave
    float f = 12.0;
    float a = 0.5 * sin(iTime);
    float vertOffset = .5;
    
    float t = vertOffset + sin(uv.x*f+iTime)*a;
    t = step(t, uv.y);    // Can change to smoothstep for a DoF effect
    
    // Colour
    vec3 bgClr = mix(vec3(1.0,0.0,0.0), vec3(0.0,1.0,1.0),uv.y);
    vec3 fgClr = mix(vec3(1.0,1.0,0.0), vec3(0.0,1.0,1.0), uv.y);    
    vec3 color = mix(fgClr, bgClr, t);
    fragColor = vec4(color,1.0);
}
